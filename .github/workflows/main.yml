name: CI/CD for JobAIReplyBot

on:
  push:
    branches:
      - main
      - feature/setup-ci-cd
  pull_request:
    branches:
      - main

env:
  REGISTRY: registry.digitalocean.com/job-ai-reply-bot
  IMAGE_NAME: job-ai-reply-bot
  CONTAINER_NAME: job-ai-reply-bot
  LOGS_PATH: /root/job-ai-reply-bot/logs

jobs:
  build_and_push:
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    outputs:
      short_sha: ${{ steps.set_short_sha.outputs.short_sha }}
    steps:
      - name: Checkout master
        uses: actions/checkout@v3

      - name: Create short SHA
        id: set_short_sha
        run: echo "short_sha=$(echo ${{ github.sha }} | head -c7)" >> $GITHUB_OUTPUT

      - name: Build container image
        run: |
          docker build -f src/DjinniAIReplyBot.Api/Dockerfile -t $REGISTRY/$IMAGE_NAME:${{ steps.set_short_sha.outputs.short_sha }} .

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Log in to DigitalOcean Container Registry
        run: doctl registry login --expiry-seconds 600

      - name: Push image to DigitalOcean Container Registry
        run: docker push $REGISTRY/$IMAGE_NAME:${{ steps.set_short_sha.outputs.short_sha }}

  copy_files:
    runs-on: ubuntu-latest
    needs: build_and_push
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Copy docker-compose.prod.yml to server
        uses: appleboy/scp-action@v0.1.1
        with:
          host: ${{ secrets.HOST }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "docker-compose.prod.yml"
          target: "/root/job-ai-reply-bot/"

  create_config:
    runs-on: ubuntu-latest
    needs: 
      - copy_files
      - build_and_push
    env:
      ENV_FILE_PATH: .env
      SHORT_SHA: ${{ needs.build_and_push.outputs.short_sha }}
    steps:
      - name: Create configuration file on server
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOST }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: ENV_FILE_PATH,REGISTRY,IMAGE_NAME,SHORT_SHA
          script: |
            cd /root/job-ai-reply-bot
            
            echo "DEFAULT_CONNECTION='${{ secrets.DEFAULT_CONNECTION }}'" > $ENV_FILE_PATH
            echo "TELEGRAM_BOT_TOKEN=${{ secrets.TELEGRAM_BOT_TOKEN }}" >> $ENV_FILE_PATH
            echo "AUTHOR_CHAT_ID=${{ secrets.AUTHOR_CHAT_ID }}" >> $ENV_FILE_PATH
            echo "CHAT_GPT_ACCESS_TOKEN=${{ secrets.CHAT_GPT_ACCESS_TOKEN }}" >> $ENV_FILE_PATH
            echo "SA_PASSWORD=${{ secrets.SA_PASSWORD }}" >> $ENV_FILE_PATH
            echo "NGROK_AUTH_TOKEN=${{ secrets.NGROK_AUTH_TOKEN }}" >> $ENV_FILE_PATH
            echo "REGISTRY=${REGISTRY}" >> $ENV_FILE_PATH
            echo "IMAGE_NAME=${IMAGE_NAME}" >> $ENV_FILE_PATH
            echo "GITHUB_SHA=${SHORT_SHA}" >> $ENV_FILE_PATH

  deploy:
    runs-on: ubuntu-latest
    needs:
      - create_config
      - build_and_push
    env:
      SHORT_SHA: ${{ needs.build_and_push.outputs.short_sha }}
    steps:
      - name: Deploy to DigitalOcean droplet via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOST }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: REGISTRY,IMAGE_NAME,SHORT_SHA
          script: |
            # Login to Docker Registry
            docker login -u ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} -p ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }} $REGISTRY

            # Перейти до директорії з docker-compose.yml
            cd /root/job-ai-reply-bot

            # Stop and remove old containers
            docker-compose -f docker-compose.prod.yml down || true

            # Pull the latest image
            docker-compose -f docker-compose.prod.yml pull

            # Start services with Docker Compose
            docker-compose -f docker-compose.prod.yml up -d
          debug: true
          
  set_webhook:
    runs-on: ubuntu-latest
    needs:
      - deploy
    env:
      NGROK_PORT: 4040
    steps:
      - name: Set Telegram Webhook with ngrok URL
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.HOST }}
          username: root
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: TELEGRAM_BOT_TOKEN,NGROK_PORT
          script: |
            echo "Fetching ngrok public URL from localhost:${NGROK_PORT}/api/tunnels"

            # Отримання ngrok URL
            NGROK_URL=$(curl -s http://localhost:${NGROK_PORT}/api/tunnels | jq -r '.tunnels[0].public_url')
            echo "NGROK_URL fetched: $NGROK_URL"

            # Формування URL вебхука
            WEBHOOK_URL="${NGROK_URL}/api/telegram"
            echo "Webhook URL to be set: $WEBHOOK_URL"

            # Встановлення вебхука
            echo "Setting Telegram Webhook..."
            curl -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/setWebhook" \
                -d "url=$WEBHOOK_URL"
            echo "Webhook set response:"
            curl -X GET "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getWebhookInfo"
          